version: 2.1


orbs:
  sonarcloud: sonarsource/sonarcloud@1.0.1
  snyk: snyk/snyk@1.1.1
  aws-cli: circleci/aws-cli@3.1.3
  terraform: circleci/terraform@3.1.0

commands:
  enable-oidc:
    steps:
      - run:
          name: authenticate-and-interact
          command: |
            # use the OpenID Connect token to obtain AWS credentials
            read -r AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN \<<< \
              $(aws sts assume-role-with-web-identity \
              --role-arn ${AWS_ROLE_ARN} \
              --role-session-name "CircleCI-${CIRCLE_WORKFLOW_ID}-${CIRCLE_JOB}" \
              --web-identity-token $CIRCLE_OIDC_TOKEN \
              --duration-seconds 3600 \
              --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
              --output text)
            export AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
            # interact with AWS
            aws sts get-caller-identity
            echo "export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" >> $BASH_ENV
            echo "export AWS_SESSION_TOKEN=${AWS_SESSION_TOKEN}" >> $BASH_ENV
            echo "export VERSION=$(cat VERSION)" >> $BASH_ENV
            source $BASH_ENV

  set-build-env:
    description: "Set environment variables needed for building"
    steps:
      - checkout
      - run:
          name: Setup Build Environment Variables
          command: |
            echo "export VERSION=$(cat VERSION)" >> $BASH_ENV
            source $BASH_ENV
  
  save-docker-image:
    description: "Saves a Docker image for future Jobs"
    steps:
      - run: mkdir -p /tmp/docker-images/
      - run:
          name: Saving Docker Image
          command: docker save --output /tmp/docker-images/${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1}.tar ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1}
      - persist_to_workspace:
          root: /tmp
          paths:
            - docker-images/*

  load-docker-image:
    description: "Loads a Docker image"
    steps:
      - attach_workspace:
          at: /tmp
      - run:
            name: Loading Docker Image
            command: docker load --input /tmp/docker-images/${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1}.tar

  testing-docker-image:
    description: "Launches tests against a Docker image"
    steps:
      - checkout
      - run:
          name: Install goss
          command: |
            # rather than give internet scripts SU rights, we install to local user bin and add to path
            export GOSS_DST=~/bin
            export PATH=$PATH:~/bin
            export GOSS_OPTS="--format junit"
            curl -fsSL https://goss.rocks/install | sh
            goss -version
      - run:
          name: Make Directory for Goss Results
          command: mkdir goss-results
      - run:
          name: Run dgoss Test
          command: |
            export GOSS_OPTS="--format junit"
            dgoss run -p 8080:8080 ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1} > ./goss-results/report.xml
      - store_test_results:
          path: goss-results
      - store_artifacts:
          path: goss-results

  build:
    description: "Build Docker image"
    steps:
      - checkout
      - run:
          name: Build Docker Image
          command: docker build --build-arg VERSION=${VERSION} --build-arg CIRCLE_BUILD_URL=${CIRCLE_BUILD_URL} --build-arg CIRCLE_SHA1=${CIRCLE_SHA1} --build-arg CIRCLE_USERNAME=${CIRCLE_USERNAME} --build-arg CIRCLE_BUILD_NUM=${CIRCLE_BUILD_NUM} -t ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1} -f Dockerfile .

  tagging:
    description: "Add tags to a Docker Image"
    steps:
      - run:
          name: Tag Image
          command: | 
            docker tag ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1} ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1}
            docker tag ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1} ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:${CIRCLE_SHA1}
            docker tag ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1} ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:${VERSION}
            docker tag ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1} ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:latest
    
  publish:
    description: "Publish Docker Image"
    steps:  
      - run:
          name: "Publish Docker Images to Docker Hub"
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            docker push ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1} 
            docker push ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:${CIRCLE_SHA1}
            docker push ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:${VERSION}
            docker push ${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:latest

  run-pytest:
    description: "Run PyTest"
    parameters:
      requirements-path:
        type: string
      pytest-args:
        type: string
        default: "--verbose"
    steps:
      - checkout
      - run:
          name: Pip Install Testing Requirements
          command: pip install -r << parameters.requirements-path >>
      - sonarcloud/scan
      - run:
          name: Make Directory for Test Results
          command: mkdir test-results
      - run:
          name: Run PyTest Test Suite
          command: pytest << parameters.pytest-args >>
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: test-results

  install-additional-packages:
    description: "Installing additional Packages for Ansible"
    steps:
      - run:
          name: Install boto3 & botocore
          command: |
            export PIP=$(which pip pip3 | head -1)
            if [[ -n $PIP ]]; then
              if which sudo > /dev/null; then
                sudo $PIP install boto3 botocore --upgrade
              else
                $PIP install boto3 botocore --upgrade --user
              fi
            else
              echo "Unable to install boto3 & botocore. Please install pip."
              exit 1
            fi
      - run:
          name: Install amazon.aws
          command: ansible-galaxy collection install amazon.aws
      - run:
          name: Install community.docker
          command: ansible-galaxy collection install community.docker

  deploy-application:
    description: "Deploy Application on Remote Host"
    parameters:
      image-tag:
        type: string
        default: "latest"
    steps:
      - run:
          name: Run Ansible Playbook
          command: ansible-playbook -i ./ansible/aws_ec2.yml -vv ./ansible/playbook.yml -u ansible -e "container_name=${DOCKERHUB_USERNAME}/${DOCKER_IMAGE}:<< parameters.image-tag >> target_hosts=$(cat output.txt)"


executors:
  browsers-python:
    docker:
      - image: circleci/python:3.9-browsers

  docker-builder:
    machine:
      image: ubuntu-2004:202010-01
      docker_layer_caching: true
    resource_class: medium

  amd64:
    machine:
      image: ubuntu-2004:202010-01
    resource_class: medium


jobs:
  test-demo:
    executor: browsers-python
    steps:
      - run-pytest:
          requirements-path: "./demo/requirements/testing.txt"
          pytest-args: "--live-server-port 8080 --verbose --junitxml=test-results/junit.xml"

  build-image:
    executor: docker-builder
    steps:
      - set-build-env
      - build
      - save-docker-image
    environment:
      DOCKER_IMAGE: circleci-demo-app

  test-image:
    executor: amd64
    steps:
      - set-build-env
      - load-docker-image
      - testing-docker-image
    environment:
      DOCKER_IMAGE: circleci-demo-app
      GOSS_SLEEP: 10

  scan-image:
    executor: amd64
    steps:
      - set-build-env
      - load-docker-image
      - snyk/scan:
          docker-image-name: ${DOCKER_IMAGE}:${VERSION}-${CIRCLE_SHA1}
    environment:
      DOCKER_IMAGE: circleci-demo-app

  tag-and-publish:
    executor: amd64
    steps:
      - set-build-env
      - load-docker-image
      - tagging
      - publish
    environment:
      DOCKER_IMAGE: circleci-demo-app

  deploy-ec2:
    docker:
      - image: cimg/deploy:2022.08
    steps:
      - checkout
      - aws-cli/install
      - enable-oidc
      - terraform/install:
          terraform_version: 1.2.5
      - terraform/init:
          path: terraform
      - terraform/plan:
          var_file: demo.tfvars
          path: terraform
      - terraform/apply:
          var_file: demo.tfvars
          path: terraform
      - run:
          name: Write out Public IP value to output.txt
          command: echo "$(cd ./terraform && terraform output public_ip)" > output.txt
      - persist_to_workspace:
          root: .
          paths:
            - .
    environment:
      AWS_DEFAULT_REGION: us-west-2

  deploy-app:
    docker:
      - image: cimg/deploy:2022.08
    steps:
      - attach_workspace:
          at: .
      - add_ssh_keys:
          fingerprints:
            - "dd:8f:af:18:32:a1:c9:b7:86:ca:73:a1:1e:77:db:87"
      - checkout
      - aws-cli/install
      - enable-oidc
      - install-additional-packages
      - deploy-application
    environment:
      DOCKER_IMAGE: circleci-demo-app


workflows:
  demo:
    jobs:
      # - test-demo:
      #     name: "Testing Python Demo Code"
      #     context: circleci-demo-app-sonarcloud
      # - build-image:
      #     name: "Building Docker Image"
      # - test-image:
      #     name: "Testing Docker Image"
      #     requires:
      #       - "Building Docker Image"
      # - scan-image:
      #     name: "Scan image via Snyk"
      #     requires:
      #       - "Building Docker Image"
      # - tag-and-publish:
      #     name: "Tag and Publish Docker Images"
      #     requires:
      #       - "Testing Docker Image"
      #       - "Scan image via Snyk"
      #       - "Testing Python Demo Code"
      #     filters:
      #       branches:
      #         only: main
      # - hold:
      #     name: "Approval Needed for Deployment"
      #     type: approval
      #     requires:
      #       - "Tag and Publish Docker Images"
      #     filters:
      #       branches:
      #         only: main
      - deploy-ec2:
          context: circleci-demo-app-oidc
          # requires:
          #   - "Tag and Publish Docker Images"
          #   - "Approval Needed for Deployment"
          filters:
            branches:
              only: main
      - deploy-app:
          context: circleci-demo-app-oidc
          requires:
            - deploy-ec2
          filters:
            branches:
              only: main